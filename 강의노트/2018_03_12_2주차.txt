Java vs C++

//C++에서 데이터타입에 할당되는 바이트수는 운영체제와 컴파일러에 따라 달라지지만 Java의 경우에는 데이터타입에 할당되는 바이트수가 고정되어있음

//Java에서는 하나의 파일에 하나의 클래스를 넣는 게 상용화되어있음

Java doesn't have

1.Multiple inheritance
2.Templates
3.Pointers(&도 없음)
4.Opeator overloading
5.Destructors
6.Delete operator

//Java의 automatic garbage collection을 통해서 안쓰는 데이터들을 정리해줌(JVM에 있음)

//Java는 완전객체지향이기 때문에 모든 함수는 클래스안의 맴버로 존재한다.

//Java는 표준콘솔입력이 없지만 표준콘솔출력은 있음(System.out)

//Java는 파라미터를 넘길 때 포인터가 없어서 파라미터 넘기는 방식이 적음
//call-by-reference는 object를 넘기거나 array를 넘길때만 실행됨

//Java는 initialize를 하지 않은 변수사용을 컴파일러에서 허락하지 않음

//C++에서의 constant는 컴파일타임에서만 고정되지만 Java에서의 constant는 런타임과 컴파일타임중 어디서 고정될지 설정할 수 있음

Ex. Java)
	final double E = 2.72; // run-time constant
	final static double C = 512; // compile-time constant
	final static int RND = (new java.util.Random()).nextInt(); // run-time constant

Q1. run-time constant를 수정할 수 없는 이유는? 수정할 수 없다면 런타임과 컴파일타임을 구분하는 이유는?

A. 컴파일할때 알 수 없는 변수나 함수들 같은경우에 컴파일타임constant를 사용할 수 없는 경우에 런타임constant를 사용함.


Ex. Java arrays)
	int x[] = new int[3];
	int[] y = {1,2,3};
	int[] values = new int[10];

//[]는 변수의 앞이나 뒤 어디든 와도 상관없음
//메모리할당만 해주면 요소가 다 0으로 설정됨

Ex. Java multidimensional arrays)
	String[][] j = {{ "00"}, {"10", "11"}};

//배열과 똑같이 초기화,선언 해주면 됨 또한 이중배열중 하나의 배열을 안만들 수 있음

//private와 public은 데이터타입 보다 먼저 써주어야됨 C++처럼 private: public:으로 묶을 수 없음

//if문의 조건문에서 C++은 숫자와 bool를 같이 쓸 수 있지만 Java에서는 boolean 값이 무조건 와야됨

//while loop에서 C++에서의 goto가 Java에서는 break로 쓸 수 있음

//








