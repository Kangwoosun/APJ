package

//library처럼 필요한 java코드들을 모아놓는 폴더를 import할때 사용함
//보통 import는 java라이브러리를 사용할 때 사용하고 package는 개발자가 만든 코드같은 경우에 사용함

//package를 지칭하지 않으면 default package를 import하는 것으로 해석함

Inheritance

ex) public class Person extends Object{

}

//Java에서 부모 클래스를 명시하는 방법으로 extends를 사용해주면 됨



Subclass
//child class, derived class


Superclass
//parent class, base class

The Object class
//class를 만들때 기본적으로 Object class를 상속받기 때문에 기본적으로 쓸 수 있는 함수가 존재함 (ex. toString(), clone(), equals() )

//이에 대한 package는 java.lang에 존재함 또한 이 java.lang은 기본적으로 import됨


"is-a VS "has-a" relationships

"is-a"

//inheritance를 의미함
//subclass 객체가 superclass 객체의 예시가 됨(ex. 차(subclass)가 탈것(superclass)의 예시다.)

ex)
public class Car{
	public Steering_Wheel Wheels[] = new Steering_Wheel[4];
}

"has-a"
//composition을 의미함
//객체는 하나 또는 더 많이 다른 객체를 맴버로 포함함
//(ex. 차가 스텔링 바퀴를 가지고 있다.)


public class Dog extends animals{
	super(A,B,C);
}

//subclass에서는 superclass의 맴버변수들을 초기화 하기위해서 superclass의 constructor을 무조건 써줘야됨 이때 superclass의 constructor대신 super이라는 명령어를 사용해도 됨

//super은 subclass에서만 사용할 수 있음. super은 superclass의 클래스명이라고 생각하면 쉬움

protected Members

//subclass, same package에서만 사용가능함 subclass를 제외한 다른 클래스에서는 이 맴버 변수를 private변수로 보아도 무방함
//하지만 protected로 맴버변수를 만들지 않는 것을 추천함. 맴버 함수는 상관 없음


