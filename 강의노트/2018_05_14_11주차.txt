File I/0

Input Stream

// Input Source(keyboard, file, network, program)에서 Java Program으로 가는 통로

Output Stream
// Java Program에서 Output(console, file, network, program)로 가는 통로

Input Stream과 Output Stream은 직접적으로 데이터를 주고 받을 수 없음

PrintWriter

//PrintWriter 클래스는 print, println 함수를 가지고 있음
//Writing to a Text File은 System.out 함수와 이름이 비슷하지만 화면에 output하는 것이 아닌 text file에 output하는 것임

- java.io.PrintWriter
- java.io.FileOutputStream
- java.io.FileNotFoundException


ex)
	PrintWriter outputStreamName;
	outputStreamName = new PrintWriter(new FileOutputStream(FileName));

//FileOutputStream 클래스는 file의 이름을 String타입으로 파라미터로 받음
//PrintWriter 클래스는 FileOutputStream 객체를 생성자 파라미터로 받음
//파일을 이어 쓸때는 FileOutputStream 생성자의 두번째 알규먼트로 true를 넣어주면 됨


Scanner

ex)
	FileInputStream fileObject = new FileInputStream("data.txt");
	Scanner x = new Scanner(fileObject);
	String s = new String();
	while(x.hasNext()){
	s = s+x.nextLine()+"\n";
	}
	

//System.in



BufferedReader

- java.io.BufferedReader
- java.io.FileReader
- java.io.FileNotFoundException
- java.io.IOException

ex)
	FileReader fr = new FileReader("your_file.txt");
	BufferReader br = new BufferedReader(fr);
	
	String sCurrentLine;
	while((sCurrentLine = br.readLine()) != null) {
		System.out.println(sCurrentLine);
	}
	br.close();

//BufferedReader에서 FileNotFoundException의 예외처리가 일어날 수 있음
//readLine에서 IOException의 예외처리가 일어날 수 있음
//읽은 데이터를 변수에 넣어줄 때 Scanner은 타입변환이 자동으로 가능하고 BufferedReader은 타입변환을 프로그래머가 알아서 해줘야됨



Binary File

[ObjectOutputStream]

- java.io.ObjectOutputStream
- java.io.FileOutStream
- java.io.IOException

ex)
	ObjectOutputStream outputStreamName = new ObjectOutputStream(new FileOutputStream(FileName));
	
//FileOutputStream에서 FileNotFoundException의 예외처리가 일어날 수 있음
//ObjectOutputStream에서 IOException의 예외처리가 일어날 수 있음
//writeInt, writeDouble, wrtieChar, writeBoolean등의 메소드를 사용하여 BinaryFile을 이용함
//또한 stream은 wrting후 close 해줘야됨


[ObjectInputStream]

- java.io.ObjectInputStream
- java.io.FileInputStream
- java.io.IOException

ex)
	ObjectInputStream InStreamName = new ObjectInputStream(new FileInputStream(FileName));

//FileInputStream에서 FileNotFoundExceoption의 예외처리가 일어날 수 있음
//ObjectInputStream에서 IOException의 예외처리가 일어날 수 있음
//Binaray File의 마지막을 체크는 EOFException으로 하면됨


Serializable Interface

ex)
	public class SomeClass implements Serializable

//Interface이기 때문에 implements 명시자를 이용하여 사용함
//Serializable를 사용해야 객체의 데이터를 연속적인 데이터로 변형하여 Stream을 통해 데이터를 읽도록 해줌
//다른 객체를 맴버변수로 가지고 있는 경우 해당 객체또한 Serializable이 적용된 상태여야만  직렬화가 가능함

Array Objects in Binary Files

//readObject, writeObject를 사용하면 됨

ex)
	SomeClass[] someObject = (SomeClass [])objectInputStream.readObject();	


Random Access to Binary Files

//파일이 이미 존재하면 파일을 열 때 길이가 0으로 재설정 되지않고 파일의 포인터가 파일의 시작 부분에 배치됨
//이전데이터를 손실시키지 않고 파일포인터가 읽기(쓰기X) 가능성이 가장 높은 위치로 설정됨

	
		


























