Generic Collections


Wrapper Classes

ex)
	Integer[] integerArray 
//ArrayList, linkedList, Vector, Set, Queue 등에 값을 넣을때 WrapperClass를 사용해서 넣어줘야됨

boxing conversion
//위 처럼 배열에 값을 넣어줄때 WrapperClass를 사용해서 넣어주는 행위

unboxing conversion
//WrapperClass의 값을 basic type으로 바꿔주는 것

aut-oboxing, auto-unboxing
//위의 행위들을 자바에서 자동적으로 해주는 것


List(가끔씩 sequence라고 불림)

//List는 중복된 element도 포함이 가능함
//Collection을 상속받음
//ListIterator를 통해서 element search가 가능함

//ArrayList와 Vector은 기존 element 중간에 element를 삽입하는 것은 비효율적임
//LinkedList는 element사이에 효율적으로 삽입이 가능함

//Vector은 synchronized가 default지만 ArrayList는 아님
//Unsynchronized collection는 synchronized 보다 나은 수행을 제공함
//ArrayList는 일반적으로 Vector보다 Collection에서 쓰레드간 컬렉션을 공유하지 않음


//MultiThreading을 구현할 때는 Vector가 낫고 중간에 값을 넣을때는 LinkedList가 나음

ex)
	Vector DynamicArray = new Vector();
	DynamicArray.add(12);
	DynamicArray.add("Hello");
	DynamicArray.add(2.3);

//Vector과 같이 Collection들은 Object로 값을 변환해서 추가시키기때문에 다른 데이터타입들도 한 Collection안에 넣어줄 수 있음. 다만 한가지의 데이터타입만 수용하고 싶으면 Vector<data type>을 데이터타입으로 넣어주면 됨


Iterator

ex) while (Iterator.hasNext()){
		Object element = Iterator.next();
		Iterator.set(element + "+");
	}


Stack Class of Package java.util

 suffix(접미사)
	long - L
	float - F
	int - None

ex)
	Stack<Number> stack = new Stack<Number>();

	stack.push(12L);
	stack.push(34567);
	stack.push(1.0F);

//Number은 Byte, Integer, Double, Short, Float, Long 데이터타입을 모두 포함함


Class PriorityQueue and Interface Queue

 Queue

//Interface인 Queue는 interface인 Collection를 extends함
//Inserting, removing, inspecting elements를 제공함

 PriorityQueue

//자연 순서에 따라 정렬함

ex)
	queue.offer(3.2);
	queue.offer(9.8);
	queue.offer(5.4);
	queue.offer(5.4);
	queue.offer(5.2);

	while(queue.size() >0){
		System.out.printf("%.1f ", queue.peek() ); // view top element
		queue.poll(); // remove top element
	}

	//output: 3.2 5.2 5.4 5.4 9.8

//queue에 넣은 값은 자동정렬됨














